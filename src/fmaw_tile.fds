// Copyright 2015 Lluís Ulzurrun de Asanza Sàez

#include "./fmaw_tile.h"

#include <map>
#include <string>
#include "./fmaw_sprite.h"

//------------------------------------------------------------------------------
// Tile class.
//------------------------------------------------------------------------------

namespace FMAW {

std::map<int, int> Tile::IDtoImgMemoryPosition {};
int Tile::nextSpriteImgMemoryPosition = 0;
int Tile::nextBackgroundImgMemoryPosition = 0;
std::map<int, int> Tile::IDtoPalMemoryPosition {};
int Tile::nextSpritePalMemoryPosition = 0;
int Tile::nextBackgroundPalMemoryPosition = 0;
int Tile::nextID = 0;

/**
     * Creates a new tile given the ID that will be used to refer to this tile.
     */
Tile::Tile(TileAttributes attributes) {
    if (attributes.type == TypeSprite) {
        this->imgMemory = self::nextSpriteImgMemoryPosition;
        this->palMemory = self::nextSpritePalMemoryPosition;
        // Move pointer so next tile will be stored properly.
        // This is equivalent to: attributes.tilesLength / 32
        self::nextSpriteImgMemoryPosition += attributes.tilesLength >> 5;
        // TODO: Update this to handle multiple size palettes.
        self::nextSpritePalMemoryPosition++;
    } else {
        this->imgMemory = self::nextBackgroundImgMemoryPosition;
        this->palMemory = self::nextBackgroundPalMemoryPosition;
        // Move pointer so next tile will be stored properly.
        // This is equivalent to: attributes.tilesLength / 32
        self::nextBackgroundImgMemoryPosition += attributes.tilesLength >> 5;
        // TODO: Update this to handle multiple size palettes.
        self::nextBackgroundPalMemoryPosition++;
    }


    FMAW::printf("I'm copying tiles of length %d to %d",
                 attributes.tilesLength, this->imgMemory);

    u16 *objram_memory;
    u16 *palram_memory;

    if (attributes.type == TypeSprite) {
        objram_memory = tile2objram(this->imgMemory);
        palram_memory = pal2objram(this->palMemory);
        if (attributes.screen == ScreenSub) {
            objram_memory = tile2objramSub(this->imgMemory);
            palram_memory = pal2objramSub(this->palMemory);
        }
    } else {
        objram_memory = tile2bgram(this->imgMemory);
        palram_memory = pal2bgram(this->palMemory);
        if (attributes.screen == ScreenSub) {
            objram_memory = tile2bgramSub(this->imgMemory);
            palram_memory = pal2bgramSub(this->palMemory);
        }

        FMAW::printf("Destination (IMG): %p", objram_memory);
        FMAW::printf("Destination (PAL): %p", palram_memory);
    }

    // Copy to memory.
    dmaCopyHalfWords(3,
                     attributes.tilesArray,
                     objram_memory,
                     attributes.tilesLength);
    dmaCopyHalfWords(3,
                     attributes.paletteArray,
                     palram_memory,
                     attributes.paletteLength);

    this->ID = this->nextID;

    // Store memory address of this tile.
    self::IDtoImgMemoryPosition[ID] = this->imgMemory;
    self::IDtoPalMemoryPosition[ID] = this->palMemory;
    // This ID has been used!
    self::nextID++;
}

/**
 * Returns tile associated with given ID.
 */
Tile::Tile(TileAttributes attributes, int ID) {
    this->ID = ID;
    this->imgMemory = self::IDtoImgMemoryPosition[ID];
    this->palMemory = self::IDtoPalMemoryPosition[ID];

    u16 *objram_memory;
    u16 *palram_memory;

    if (attributes.type == TypeSprite) {
        objram_memory = tile2objram(this->imgMemory);
        palram_memory = pal2objram(this->palMemory);
        if (attributes.screen == ScreenSub) {
            objram_memory = tile2objramSub(this->imgMemory);
            palram_memory = pal2objramSub(this->palMemory);
        }
    } else {
        objram_memory = tile2bgram(this->imgMemory);
        palram_memory = pal2bgram(this->palMemory);
        if (attributes.screen == ScreenSub) {
            objram_memory = tile2bgramSub(this->imgMemory);
            palram_memory = pal2bgramSub(this->palMemory);
        }
    }
    /*
        // Copy to memory.
        dmaCopyHalfWords(3,
                         attributes.tilesArray,
                         objram_memory,
                         attributes.tilesLength);
        dmaCopyHalfWords(3,
                         attributes.paletteArray,
                         palram_memory,
                         attributes.paletteLength);
    */
}

/**
 * Returns tile associated with given ID.
 */
Tile::Tile(int ID) {
    this->ID = ID;
    this->imgMemory = self::IDtoImgMemoryPosition[ID];
    this->palMemory = self::IDtoPalMemoryPosition[ID];
}

}  // namespace FMAW
